
Unbound (static defined on same level as entity set)
Bound
    * 2 inputs
    * returns single complex
    * returns single enum
    * returns collection
    * - client side: complex input (Get({x: 7})) Parameter values passed to functions MUST be specified either as a URL literal (for primitive values) or as a JSON formatted OData object (for complex values, or collections of primitive or complex values). Entity typed values are passed as JSON formatted entities that MAY include a subset of the properties, or just the entity reference, as appropriate to the function.   
        - input as entity
        - input as complex type which is exculsive to this function
        - input as collection
    * - client side: colleciton input (Get([{x: 7}])) Parameter values passed to functions MUST be specified either as a URL literal (for primitive values) or as a JSON formatted OData object (for complex values, or collections of primitive or complex values). Entity typed values are passed as JSON formatted entities that MAY include a subset of the properties, or just the entity reference, as appropriate to the function.   
    * - client side: server side value inpout (Get(my/greeting))
    * nullable args
    * what happens if the function has a param named "bindingParameter"
    * how does the whitelist behave with unbound and collection bound functions
    * Optional namespaces on entity set functions
    * https://learn.microsoft.com/en-us/odata/webapi/function-parameter-support

    add namespaces to entities in path: odata/test-entities/Users({key})/HasBlog(blog={blog}) -vs- odata/test-entities/Users({key})/My.Odata.Entities.HasBlog(blog={blog})
    

Data params

 * enum as param
 * use the param of an inner obj: .withKey((k, params) => k.key(params.createRef("x", root => root => root.My.Odata.Container.BlogPosts
                        .withKey((x, param2) => x.key(param2.const("x2", 123)))
